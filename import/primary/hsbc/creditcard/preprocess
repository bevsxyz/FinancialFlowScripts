#!/usr/bin/env python3
import sys
from pathlib import Path
import camelot
import pandas as pd
import os


def usage():
    """Print usage instructions."""
    print(f"Usage: {sys.argv[0]} <input_file.pdf> <output_file.csv> [table_area] [pages]")
    sys.exit(1)

def map_amount(amount: str) -> str:
    clean_amount = amount.replace(",", "")
    if "CR" in amount:
        clean_amount = "-" + clean_amount.replace("\nCR", "")
    return clean_amount

def clean_df(df: pd.DataFrame) -> pd.DataFrame:
    """Clean up extracted table data."""
    # Keep only non-empty and non-header rows
    df = df.loc[df[0].map(lambda x: x not in ("", "DATE"))]

    # Rename columns
    df.columns = ["date", "description", "amount"]
    df.loc[:, "description"] = df["description"].str.replace("\n", " ")

    # Remove commas and convert to float
    df.loc[:, "amount"] = df["amount"].map(map_amount).astype(float)

    # Strip whitespace from strings
    df = df.map(lambda x: x.strip() if isinstance(x, str) else x)

    return df


def match_account(desc: str) -> str:
    """Map description to expense category."""
    if not isinstance(desc, str):
        return "expenses:unknown"

    desc_lower = desc.lower()
    if "zomato" in desc_lower:
        return "expenses:food:zomato"
    elif "blink" in desc_lower:
        return "expenses:grocery:blinkit"
    elif "rentomojo" in desc_lower:
        return "expenses:rent:rentomojo"
    elif "hospital" in desc_lower:
        return "expenses:health:hospital"
    elif "flipkart" in desc_lower:
        return "expenses:shopping:flipkart"
    elif "4862 6989 4081 8396" in desc_lower:
        return "Assets:transfers:HSBCChequeCredit"
    else:
        return "expenses:unknown"


def main():
    # --- Parse arguments ---
    if len(sys.argv) < 3:
        usage()

    input_path = Path(sys.argv[1])
    output_path = Path(sys.argv[2])

    table_area = "0,600,450,200"
    pages = "all"

    # Get PDF password from environment variable
    password = os.environ.get("HLEDGER_HSBC_CREDIT_PASS", "")

    # --- Extract tables from PDF ---
    tables = camelot.read_pdf(
        str(input_path),
        password=password,
        table_areas=[table_area],
        columns=['66,349'],
        flavor="stream",
        pages=pages
    )

    # Skip table if needed
    pattern = r"^\d{1,3}(,\d{2})*(,\d{3})?\.\d{2}(\\nCR)?$"
    dfs = [table.df for table in tables if table.df[2].str.contains(pattern).any()]

    # --- Clean and merge DataFrames ---
    cleaned_dfs = [clean_df(df) for df in dfs]
    merged_df = pd.concat(cleaned_dfs, ignore_index=True).reset_index(drop=True)
    balance = merged_df.loc[merged_df['description'].str.contains("OUTSTANDING"), "amount"]
    balance = balance.values[0]
    merged_df.loc[merged_df['description'].str.contains("OUTSTANDING"), ["amount",'balance']] = (0, -balance)

    # --- Map accounts ---
    merged_df["account1"] = merged_df["description"].map(match_account)

    # --- Extract statement date range to infer year ---
    account_table = camelot.read_pdf(str(input_path), password=password,
            flavor="stream", table_areas=['250,730, 460, 760'])[0].df
    
    mask = account_table[0].str.contains(" To ")
    date_range = account_table[0][mask].str.split().to_list()[0]

    # Example: {"Jan": "2024", "Feb": "2024"}
    year_map =  {date_range[1]:date_range[2],date_range[5]:date_range[6]}
    def map_date(d: str) -> str:
        # Append year based on month abbreviation
        month_abbr = d[-3:]
        return d + year_map.get(month_abbr, "")

    merged_df["date"] = merged_df["date"].map(map_date)

    # --- Save output ---
    merged_df.to_csv(output_path, index=False)
    # Print stats
    unknown_count = merged_df["account1"].str.contains("unknown", case=False).sum()
    print(f"Processed {len(merged_df)} transactions with {unknown_count} unknown accounts")

if __name__ == "__main__":
    main()

